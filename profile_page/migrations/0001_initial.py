# Generated by Django 3.1.2 on 2020-11-23 23:17

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nickname', models.CharField(blank=True, default='', help_text='<br/>\t*Only alphanumeric characters, spaces, and underscores are allowed.*', max_length=50, null=True, validators=[django.core.validators.RegexValidator('^[0-9a-zA-Z_ ]*$', 'Only alphanumeric characters, spaces, and underscores are allowed.')])),
                ('image', models.ImageField(default='default.jpg', upload_to='')),
                ('url', models.URLField(blank=True, verbose_name='Website')),
                ('major', models.CharField(blank=True, choices=[('African American & African Studies', 'African American & African Studies'), ('American Studies', 'American Studies'), ('Anthropology', 'Anthropology'), ('Art History', 'Art History'), ('Art, Studio', 'Art, Studio'), ('Astronomy', 'Astronomy'), ('Astronomy-Physics', 'Astronomy-Physics'), ('Biology', 'Biology'), ('Chemistry', 'Chemistry'), ('Chinese Language & Literature', 'Chinese Language & Literature'), ('Classics', 'Classics'), ('Cognitive Science', 'Cognitive Science'), ('Comparative Literature', 'Comparative Literature'), ('Computer Science', 'Computer Science'), ('Drama', 'Drama'), ('East Asian Studies', 'East Asian Studies'), ('Economics', 'Economics'), ('English', 'English'), ('Environmental Sciences', 'Environmental Sciences'), ('Environmental Thought & Practice', 'Environmental Thought & Practice'), ('French', 'French'), ('German', 'German'), ('Global Studies', 'Global Studies'), ('History', 'History'), ('Human Biology', 'Human Biology'), ('Italian', 'Italian'), ('Japanese Language & Literature', 'Japanese Language & Literature'), ('Jewish Studies', 'Jewish Studies'), ('Latin American Studies', 'Latin American Studies'), ('Linguistics', 'Linguistics'), ('Mathematics', 'Mathematics'), ('Media Studies', 'Media Studies'), ('Medieval Studies', 'Medieval Studies'), ('Middle Eastern and South Asian Languages and Cultures', 'Middle Eastern and South Asian Languages and Cultures'), ('Music', 'Music'), ('Neuroscience', 'Neuroscience'), ('Philosophy', 'Philosophy'), ('Physics', 'Physics'), ('Political and Social Thought', 'Political and Social Thought'), ('Political Philosophy, Policy, and Law', 'Political Philosophy, Policy, and Law'), ('Politics', 'Politics'), ('Psychology', 'Psychology'), ('Religious Studies', 'Religious Studies'), ('Slavic Languages and Literatures', 'Slavic Languages and Literatures'), ('Sociology', 'Sociology'), ('South Asian Studies', 'South Asian Studies'), ('Spanish', 'Spanish'), ('Statistics', 'Statistics'), ('Women, Gender, and Sexuality', 'Women, Gender, and Sexuality'), ('Aerospace Engineering', 'Aerospace Engineering'), ('Biomedical Engineering', 'Biomedical Engineering'), ('Chemical Engineering', 'Chemical Engineering'), ('Civil Engineering', 'Civil Engineering'), ('Computer Engineering', 'Computer Engineering'), ('Computer Science', 'Computer Science'), ('Electrical Engineering', 'Electrical Engineering'), ('Engineering Science', 'Engineering Science'), ('Mechanical Engineering', 'Mechanical Engineering'), ('Systems Engineering', 'Systems Engineering'), ('Accounting', 'Accounting'), ('Finance', 'Finance'), ('Information Technology', 'Information Technology'), ('Management', 'Management'), ('Marketing', 'Marketing'), ('School of Architecture', 'School of Architecture'), ('Architectural History', 'Architectural History'), ('Architecture', 'Architecture'), ('Urban & Environmental Planning', 'Urban & Environmental Planning'), ('School of Nursing', 'School of Nursing'), ('Bachelor of Science in Nursing (BSN)', 'Bachelor of Science in Nursing (BSN)'), ('RN to BSN', 'RN to BSN'), ('Batten School of Leadership and Public Policy', 'Batten School of Leadership and Public Policy'), ('B.A. in Public Policy and Leadership', 'B.A. in Public Policy and Leadership'), ('Accelerated B.A./Master of Public Policy (MPP) Program', 'Accelerated B.A./Master of Public Policy (MPP) Program'), ('Curry School of Education', 'Curry School of Education'), ('Kinesiology', 'Kinesiology'), ('Speech Communications Disorders', 'Speech Communications Disorders'), ('Youth & Social Innovation', 'Youth & Social Innovation'), ('Teacher Education majors (B.S.Ed.)', 'Teacher Education majors (B.S.Ed.)'), ('Early Childhood Education', 'Early Childhood Education'), ('Elementary Education', 'Elementary Education'), ('Special Education', 'Special Education'), ('Teacher Education (listing-graduate Master of Teaching)', 'Teacher Education (listing-graduate Master of Teaching)'), ('Elementary Education', 'Elementary Education'), ('English Education', 'English Education'), ('English as a Second Language Education', 'English as a Second Language Education'), ('Foreign Language Education', 'Foreign Language Education'), ('Mathematics Education', 'Mathematics Education'), ('Science Education', 'Science Education'), ('Social Studies Education', 'Social Studies Education'), ('Special Education', 'Special Education')], max_length=69)),
                ('year', models.CharField(blank=True, choices=[('2020', '2020'), ('2021', '2021'), ('2022', '2022'), ('2023', '2023'), ('2024', '2024'), ('2025', '2025'), ('2026', '2026'), ('2027', '2027')], max_length=69)),
                ('relevant_class', models.CharField(blank=True, choices=[('CS1111', 'CS1111'), ('CS2102', 'CS2102'), ('CS2110', 'CS2110'), ('CS2150', 'CS2150'), ('CS3240', 'CS3240'), ('lame class', 'lame class')], max_length=69)),
                ('bio', models.TextField(blank=True, default='', max_length=250)),
                ('zoom_id', models.CharField(default='', max_length=12, validators=[django.core.validators.RegexValidator(regex='^\\d{3}-\\d{3}-\\d{4}$')])),
                ('username', models.CharField(blank=True, max_length=60)),
                ('class_1', models.CharField(blank=True, default='', help_text='<br/>\t*Enter the class identifier (e.g. CS3240)*', max_length=300, null=True)),
                ('class_2', models.CharField(blank=True, default='', help_text='<br/>\t*Enter the class identifier (e.g. CS3240)*', max_length=300, null=True)),
                ('class_3', models.CharField(blank=True, default='', help_text='<br/>\t*Enter the class identifier (e.g. CS3240)*', max_length=300, null=True)),
                ('class_4', models.CharField(blank=True, default='', help_text='<br/>\t*Enter the class identifier (e.g. CS3240)*', max_length=300, null=True)),
                ('class_5', models.CharField(blank=True, default='', help_text='<br/>\t*Enter the class identifier (e.g. CS3240)*', max_length=300, null=True)),
                ('class_6', models.CharField(blank=True, default='', help_text='<br/>\t*Enter the class identifier (e.g. CS3240)*', max_length=300, null=True)),
                ('class_7', models.CharField(blank=True, default='', help_text='<br/>\t*Enter the class identifier (e.g. CS3240)*', max_length=300, null=True)),
                ('user', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
